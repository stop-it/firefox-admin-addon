/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var { Cu } = require('chrome');
var pageMod = require('sdk/page-mod');
var self = require('sdk/self');
var tabs = require('sdk/tabs');
var ui = require('sdk/ui');

Cu.import('resource://gre/modules/Sqlite.jsm');
Cu.import('resource://gre/modules/Task.jsm');

// URL to main add-on's page.
var addonPageUrl = self.data.url('page.html');

/**
 * Path to SQLite database file.
 * @var {string} databaseFile
 */
var databaseFile = require('sdk/simple-prefs').prefs['databaseFile'];

/**
 * Called when preference with path of database file is changed.
 * @param {string} aPrefName
 * @todo We should renew database connection.
 */
function onDatabaseFileChange(aPrefName) {
	console.log('Database file is changed!');
	databaseFile = require('sdk/simple-prefs').prefs['databaseFile'];
	if (databaseFile != undefined) {
		MainButton.state('window', {
			'badge': null,
			'badgeColor': null,
			'label': 'Stop-It Administration'
		});
	}
	console.log(databaseFile);
} // end onDatabaseFileChange(aPrefName)

// Attach event listener for changing `databaseFile` preference value.
require('sdk/simple-prefs').on('databaseFile', onDatabaseFileChange);

// Main toolbar button.
var MainButton = ui.ActionButton({
	id: 'stopit-admin-btn',
	label: 'Stop-It Administration',
	icon: {
		16: './icon-16.png',
		32: './icon-32.png',
		64: './icon-64.png'
	},
	onClick: handleMainButtonClick
});

// Display warning badge on toolbar button if `databaseFile` is not set
if (databaseFile == undefined) {
	console.log('Database file is not set!');
	MainButton.state('window', {
		'badge': '!',
		'badgeColor': '#F44336',
		'label': 'Stop-It Administration: Database file is not selected!'
	});
}

// Use page mod to attach worker to the main add-on's page
var MainPageMod = pageMod.PageMod({
	include: [addonPageUrl],
	contentScriptFile: self.data.url('page.js'),
	onAttach: attachWorker
});

/**
 * Open main add-on's page.
 */
function handleMainButtonClick() {
	// Check if page is already opened - if yes bring it to the foreground.
	for (let tab of tabs) {
		// We don't check exact match just the main URL
		if (tab.url == addonPageUrl) {
			tab.activate();
			return;
		}
	}
	// Homepage is not opened yet - open it
	tabs.open(addonPageUrl);
} // end handleMainButtonClick()

/**
 * Start listening to our main page.
 * @var object aWorker
 */
function attachWorker(aWorker) {
	// Listen for request for close page (tab).
	aWorker.port.on('close_page', function() {
		console.log('Closing tab on request comming from the page self.');
		aWorker.tab.close();
	});

	// Database connection is not established yet.
	if (databaseFile == undefined) {
		aWorker.port.emit('database_undefined');
		return;
	}

	Task.spawn(function* loadUrls() {
		let conn = yield Sqlite.openConnection({path: databaseFile});

		try {
			let sql = 'SELECT * FROM Urls ORDER BY Id ASC LIMIT 0, 50';
			let result = yield conn.execute(sql);
			let rows = [];

			for (let row of result) {
				rows.push({
					id: row.getResultByName('Id'),
					url: row.getResultByName('Url'),
					updated: row.getResultByName('Updated')
				});
			}

			aWorker.port.emit('create_data_table', rows);
		} finally {
			yield conn.close();
		}
	});

	// ...
} // end startListening(aWorker)

// ========================================================================
// Generated by JPM:

// a dummy function, to show how tests work.
// to see how to test this function, look at test/test-index.js
//function dummy(text, callback) {
//callback(text);
//}
//
//exports.dummy = dummy;
